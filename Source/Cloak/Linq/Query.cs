using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Linq;
using System.Linq.Expressions;
using System.Text;

namespace Cloak.Linq
{
	/// <summary>
	/// An implementation of <see cref="IQueryable{T}"/>
	/// </summary>
	/// <typeparam name="T">The type of elements in the sequence</typeparam>
	public sealed class Query<T> : IOrderedQueryable<T>
	{
		private readonly QueryProvider _provider;
		private readonly Expression _expression;

		/// <summary>
		/// Initializes a query with the specified provider
		/// </summary>
		/// <param name="provider">The provider which backs this query</param>
		public Query(QueryProvider provider)
		{
			Contract.Requires(provider != null);

			_provider = provider;
			_expression = Expression.Constant(this);
		}

		/// <summary>
		/// Initializes a query with the specified provider
		/// </summary>
		/// <param name="provider">The provider which backs this query</param>
		/// <param name="expression">The expression representing the semantics of this query</param>
		public Query(QueryProvider provider, Expression expression)
		{
			Contract.Requires(provider != null);
			Contract.Requires(expression != null);
			Contract.Requires(typeof(IQueryable<T>).IsAssignableFrom(expression.Type));

			_provider = provider;
			_expression = expression;
		}

		#region IEnumerable

		IEnumerator IEnumerable.GetEnumerator()
		{
			return GetEnumerator();
		}

		/// <summary>
		/// Gets an enumerator for the results of this query
		/// </summary>
		public IEnumerator<T> GetEnumerator()
		{
			return ((IEnumerable<T>) _provider.Execute(_expression)).GetEnumerator();
		}
		#endregion

		#region IQueryable

		Type IQueryable.ElementType
		{
			get { return typeof(T); }
		}

		Expression IQueryable.Expression
		{
			get { return _expression; }
		}

		IQueryProvider IQueryable.Provider
		{
			get { return _provider; }
		}
		#endregion

		/// <summary>
		/// Gets the text generated by this query's provider
		/// </summary>
		public override string ToString()
		{
			return _provider.GetQueryText(_expression);
		}
	}
}